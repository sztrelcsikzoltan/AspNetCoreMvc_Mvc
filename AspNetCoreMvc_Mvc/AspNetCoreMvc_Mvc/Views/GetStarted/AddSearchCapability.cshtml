@{
    ViewData["Title"] = "Search Capability";
}

<div class="container">
    <div class="container">
        <div class="div-flex">
            <a class="button" asp-area="" asp-controller="GetStarted" asp-action="ControllerMethods">Previous: Controller methods</a>
            <span class="span-flex"></span>
            <a class="button" asp-area="" asp-controller="GetStarted" asp-action="AddNewField">Next: Add a new field</a>
        </div>

        <h2>Part 7, add search to an ASP.NET Core MVC app</h2>

        <p>In this section, you add search capability to the <code>Index</code> action method that lets you search movies by <em>genre</em> or <em>name</em>.</p>
        <p>Update the <code>Index</code> method found inside <em>Controllers/MoviesController.cs</em> with the following code:</p>
<pre><code class="lang-csharp">public async Task&lt;IActionResult&gt; Index(string searchString)
{
    var movies = from m in _context.Movie
                 select m;

    if (!String.IsNullOrEmpty(searchString))
    {
        movies = movies.Where(s =&gt; s.Title!.Contains(searchString));
    }

    return View(await movies.ToListAsync());
}
</code></pre>
        <p>The first line of the <code>Index</code> action method creates a <a href="https://docs.microsoft.comhttps://docs.microsoft.com/en-us/dotnet/standard/using-linq" data-linktype="absolute-path">LINQ</a> query to select the movies:</p>
<pre><code class="lang-csharp">var movies = from m in _context.Movie
             select m;
</code></pre>
        <p>The query is <em>only defined</em> at this point, it has <strong>not</strong> been run against the database.</p>
        <p>If the <code>searchString</code> parameter contains a string, the movies query is modified to filter on the value of the search string:</p>
<pre><code class="lang-csharp">if (!String.IsNullOrEmpty(searchString))
{
    movies = movies.Where(s =&gt; s.Title!.Contains(searchString));
}
</code></pre>
        <p>The <code>s =&gt; s.Title.Contains(searchString)</code> code above is a <a href="https://docs.microsoft.comhttps://docs.microsoft.com/en-us/dotnet/csharp/programming-guide/statements-expressions-operators/lambda-expressions" data-linktype="absolute-path">Lambda Expression</a>. Lambdas are used in method-based <a href="https://docs.microsoft.comhttps://docs.microsoft.com/en-us/dotnet/standard/using-linq" data-linktype="absolute-path">LINQ</a> queries as arguments to standard query operator methods such as the <a href="https://docs.microsoft.comhttps://docs.microsoft.com/en-us/dotnet/api/system.linq.enumerable.where" data-linktype="absolute-path">Where</a> method or <code>Contains</code> (used in the code above). LINQ queries are not executed when they're defined or when they're modified by calling a method such as <code>Where</code>, <code>Contains</code>, or <code>OrderBy</code>. Rather, query execution is deferred.  That means that the evaluation of an expression is delayed until its realized value is actually iterated over or the <code>ToListAsync</code> method is called. For more information about deferred query execution, see <a href="https://docs.microsoft.comhttps://docs.microsoft.com/en-us/dotnet/framework/data/adonet/ef/language-reference/query-execution" data-linktype="absolute-path">Query Execution</a>.</p>
        <p>Note: The <a href="https://docs.microsoft.comhttps://docs.microsoft.com/en-us/dotnet/api/system.data.objects.dataclasses.entitycollection-1.contains" data-linktype="absolute-path">Contains</a> method is run on the database, not in the c# code shown above. The case sensitivity on the query depends on the database and the collation. On SQL Server, <a href="https://docs.microsoft.comhttps://docs.microsoft.com/en-us/dotnet/api/system.data.objects.dataclasses.entitycollection-1.contains" data-linktype="absolute-path">Contains</a> maps to <a href="https://docs.microsoft.com/en-us/sql/t-sql/language-elements/like-transact-sql" data-linktype="absolute-path">SQL LIKE</a>, which is case insensitive. In SQLite, with the default collation, it's case sensitive.</p>
        <p>Navigate to <code>/Movies/Index</code>. Append a query string such as <code>?searchString=Ghost</code> to the URL. The filtered movies are displayed.</p>
        <p><img src="/img/addsearch01-ghost.png" alt="Index view" title="Index view"></p>
        <p>If you change the signature of the <code>Index</code> method to have a parameter named <code>id</code>, the <code>id</code> parameter will match the optional <code>{id}</code> placeholder for the default routes set in <em>Program.cs</em>.</p>
<pre><code class="lang-csharp" highlight-lines="3">app.MapControllerRoute(
    name: &quot;default&quot;,
    pattern: &quot;{controller=Home}/{action=Index}/{id?}&quot;);
</code></pre>
        <p>Change the parameter to <code>id</code> and change all occurrences of <code>searchString</code> to <code>id</code>.</p>
        <p>The previous <code>Index</code> method:</p>
<pre><code class="lang-csharp">public async Task&lt;IActionResult&gt; Index(string searchString)
{
    var movies = from m in _context.Movie
                 select m;

    if (!String.IsNullOrEmpty(searchString))
    {
        movies = movies.Where(s =&gt; s.Title!.Contains(searchString));
    }

    return View(await movies.ToListAsync());
}
</code></pre>
        <p>The updated <code>Index</code> method with <code>id</code> parameter:</p>
<pre><code class="lang-csharp" highlight-lines="1,6,8">public async Task&lt;IActionResult&gt; Index(string id)
{
    var movies = from m in _context.Movie
                 select m;

    if (!String.IsNullOrEmpty(id))
    {
        movies = movies.Where(s =&gt; s.Title!.Contains(id));
    }

    return View(await movies.ToListAsync());
}
</code></pre>
        <p>You can now pass the search title as route data (a URL segment) instead of as a query string value.</p>
        <p><img src="/img/addsearch02-g2.png" alt="Index view with the word ghost added to the Url and a returned movie list of two movies, Ghostbusters and Ghostbusters 2" title="Index view with the word ghost added to the Url and a returned movie list of two movies, Ghostbusters and Ghostbusters 2"></p>
        <p>However, you can't expect users to modify the URL every time they want to search for a movie. So now you'll add UI elements to help them filter movies. If you changed the signature of the <code>Index</code> method to test how to pass the route-bound <code>ID</code> parameter, change it back so that it takes a parameter named <code>searchString</code>:</p>
<pre><code class="lang-csharp" highlight-lines="1,6,8">public async Task&lt;IActionResult&gt; Index(string searchString)
{
    var movies = from m in _context.Movie
                 select m;

    if (!String.IsNullOrEmpty(searchString))
    {
        movies = movies.Where(s =&gt; s.Title!.Contains(searchString));
    }

    return View(await movies.ToListAsync());
}
</code></pre>
        <p>Open the <em>Views/Movies/Index.cshtml</em> file, and add the <code>&lt;form&gt;</code> markup highlighted below:</p>
<pre><code class="lang-cshtml" highlight-lines="13-18">
    @@model IEnumerable&lt;MvcMovie.Models.Movie&gt;

    @@{
    ViewData[&quot; Title & quot;] = &quot; Index & quot; ;
    }

    &lt;h2&gt;Index&lt;/h2&gt;

    &lt;p&gt;
    &lt;a asp-action=&quot;Create&quot;&gt;Create New&lt;/a&gt;
    &lt;/p&gt;

    &lt;form asp-controller=&quot;Movies&quot; asp-action=&quot;Index&quot;&gt;
    &lt;p&gt;
    Title: &lt;input type=&quot;text&quot; name=&quot;SearchString&quot; /&gt;
    &lt;input type=&quot;submit&quot; value=&quot;Filter&quot; /&gt;
    &lt;/p&gt;
    &lt;/form&gt;

</code></pre>
        <p>The HTML <code>&lt;form&gt;</code> tag uses the <a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/views/working-with-forms?view=aspnetcore-5.0" data-linktype="relative-path">Form Tag Helper</a>, so when you submit the form, the filter string is posted to the <code>Index</code> action of the movies controller. Save your changes and then test the filter.</p>
        <p><img src="/img/addsearch03-filter.png" alt="Index view with the word ghost typed into the Title filter textbox" title="Index view with the word ghost typed into the Title filter textbox"></p>
        <p>There's no <code>[HttpPost]</code> overload of the <code>Index</code> method as you might expect. You don't need it, because the method isn't changing the state of the app, just filtering data.</p>
        <p>You could add the following <code>[HttpPost] Index</code> method.</p>
<pre><code class="lang-csharp" highlight-lines="1">[HttpPost]
public string Index(string searchString, bool notUsed)
{
    return &quot;From [HttpPost]Index: filter on &quot; + searchString;
}
</code></pre>
        <p>The <code>notUsed</code> parameter is used to create an overload for the <code>Index</code> method. We'll talk about that later in the tutorial.</p>
        <p>If you add this method, the action invoker would match the <code>[HttpPost] Index</code> method, and the <code>[HttpPost] Index</code> method would run as shown in the image below.</p>
        <p><img src="/img/addsearch04-fo.png" alt="Browser window with application response of From HttpPost Index: filter on ghost" title="Browser window with application response of From HttpPost Index: filter on ghost"></p>
        <p>However, even if you add this <code>[HttpPost]</code> version of the <code>Index</code> method, there's a limitation in how this has all been implemented. Imagine that you want to bookmark a particular search or you want to send a link to friends that they can click in order to see the same filtered list of movies. Notice that the URL for the HTTP POST request is the same as the URL for the GET request (localhost:{PORT}/Movies/Index) -- there's no search information in the URL. The search string information is sent to the server as a <a href="https://developer.mozilla.org/docs/Learn/HTML/Forms/Sending_and_retrieving_form_data" data-linktype="external">form field value</a>. You can verify that with the browser Developer tools or the excellent <a href="https://www.telerik.com/fiddler" data-linktype="external">Fiddler tool</a>. The image below shows the Chrome browser Developer tools:</p>
        <p><img src="/img/addsearch05-f12_rb.png" alt="Network tab of Developer Tools in Microsoft Edge showing a request body with a searchString value of ghost" title="Network tab of Developer Tools in Microsoft Edge showing a request body with a searchString value of ghost"></p>
        <p>You can see the search parameter and <a href="https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery?view=aspnetcore-5.0" data-linktype="relative-path">XSRF</a> token in the request body. Note, as mentioned in the previous tutorial, the <a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/views/working-with-forms?view=aspnetcore-5.0" data-linktype="relative-path">Form Tag Helper</a> generates an <a href="https://docs.microsoft.com/en-us/aspnet/core/security/anti-request-forgery?view=aspnetcore-5.0" data-linktype="relative-path">XSRF</a> anti-forgery token. We're not modifying data, so we don't need to validate the token in the controller method.</p>
        <p>Because the search parameter is in the request body and not the URL, you can't capture that search information to bookmark or share with others. Fix this by specifying the request should be <code>HTTP GET</code> found in the <em>Views/Movies/Index.cshtml</em> file.</p>
<pre><code class="lang-cshtml" highlight-lines="13">
    @@model IEnumerable&lt;MvcMovie.Models.Movie&gt;

    @@{
    ViewData[&quot; Title & quot;] = &quot; Index & quot; ;
    }

    &lt;h1&gt;Index&lt;/h1&gt;

    &lt;p&gt;
    &lt;a asp-action=&quot;Create&quot;&gt;Create New&lt;/a&gt;
    &lt;/p&gt;

    &lt;form asp-controller=&quot;Movies&quot; asp-action=&quot;Index&quot; method=&quot;get&quot;&gt;
    &lt;p&gt;
    Title: &lt;input type=&quot;text&quot; name=&quot;SearchString&quot; /&gt;
    &lt;input type=&quot;submit&quot; value=&quot;Filter&quot; /&gt;
    &lt;/p&gt;
    &lt;/form&gt;
    &lt;table class=&quot;table&quot;&gt;
</code></pre>
        <p>Now when you submit a search, the URL contains the search query string. Searching will also go to the <code>HttpGet Index</code> action method, even if you have a <code>HttpPost Index</code> method.</p>
        <p><img src="/img/addsearch06-search_get.png" alt="Browser window showing the searchString=ghost in the Url and the movies returned, Ghostbusters and Ghostbusters 2, contain the word ghost" title="Browser window showing the searchString=ghost in the Url and the movies returned, Ghostbusters and Ghostbusters 2, contain the word ghost"></p>
        <p>The following markup shows the change to the <code>form</code> tag:</p>
<pre><code class="lang-cshtml">&lt;form asp-controller=&quot;Movies&quot; asp-action=&quot;Index&quot; method=&quot;get&quot;&gt;
</code></pre>
        <h4 id="add-search-by-genre">Add Search by genre</h4>
        <p>Add the following <code>MovieGenreViewModel</code> class to the <em>Models</em> folder:</p>
<pre><code class="lang-csharp">using Microsoft.AspNetCore.Mvc.Rendering;
using System.Collections.Generic;

namespace MvcMovie.Models
{
    public class MovieGenreViewModel
    {
        public List&lt;Movie&gt;? Movies { get; set; }
        public SelectList? Genres { get; set; }
        public string? MovieGenre { get; set; }
        public string? SearchString { get; set; }
    }
}

</code></pre>
        <p>The movie-genre view model will contain:</p>
        <ul>
            <li>A list of movies.</li>
            <li>A <code>SelectList</code> containing the list of genres. This allows the user to select a genre from the list.</li>
            <li><code>MovieGenre</code>, which contains the selected genre.</li>
            <li><code>SearchString</code>, which contains the text users enter in the search text box.</li>
        </ul>
        <p>Replace the <code>Index</code> method in <code>MoviesController.cs</code> with the following code:</p>
<pre><code class="lang-csharp">// GET: Movies
public async Task&lt;IActionResult&gt; Index(string movieGenre, string searchString)
{
    // Use LINQ to get list of genres.
    IQueryable&lt;string&gt; genreQuery = from m in _context.Movie
                                    orderby m.Genre
                                    select m.Genre;
    var movies = from m in _context.Movie
                 select m;

    if (!string.IsNullOrEmpty(searchString))
    {
        movies = movies.Where(s =&gt; s.Title!.Contains(searchString));
    }

    if (!string.IsNullOrEmpty(movieGenre))
    {
        movies = movies.Where(x =&gt; x.Genre == movieGenre);
    }

    var movieGenreVM = new MovieGenreViewModel
    {
        Genres = new SelectList(await genreQuery.Distinct().ToListAsync()),
        Movies = await movies.ToListAsync()
    };

    return View(movieGenreVM);
}
</code></pre>
        <p>The following code is a <code>LINQ</code> query that retrieves all the genres from the database.</p>
<pre><code class="lang-csharp">// Use LINQ to get list of genres.
IQueryable&lt;string&gt; genreQuery = from m in _context.Movie
                                orderby m.Genre
                                select m.Genre;
</code></pre>
        <p>The <code>SelectList</code> of genres is created by projecting the distinct genres (we don't want our select list to have duplicate genres).</p>
        <p>When the user searches for the item, the search value is retained in the search box.</p>
        <h4 id="add-search-by-genre-to-the-index-view">Add search by genre to the Index view</h4>
        <p>Update <code>Index.cshtml</code> found in <em>Views/Movies/</em> as follows:</p>
<pre><code class="lang-cshtml" highlight-lines="1,15,16,17,28,31,34,37">
    @@model MvcMovie.Models.MovieGenreViewModel

    @@{
    ViewData[&quot; Title & quot;] = &quot; Index & quot; ;
    }

    &lt;h1&gt;Index&lt;/h1&gt;

    &lt;p&gt;
    &lt;a asp-action=&quot;Create&quot;&gt;Create New&lt;/a&gt;
    &lt;/p&gt;
    &lt;form asp-controller=&quot;Movies&quot; asp-action=&quot;Index&quot; method=&quot;get&quot;&gt;
    &lt;p&gt;

    &lt;select asp-for=&quot;MovieGenre&quot; asp-items=&quot;Model.Genres&quot;&gt;
    &lt;option value=&quot;&quot;&gt;All&lt;/option&gt;
    &lt;/select&gt;

    Title: &lt;input type=&quot;text&quot; asp-for=&quot;SearchString&quot; /&gt;
    &lt;input type=&quot;submit&quot; value=&quot;Filter&quot; /&gt;
    &lt;/p&gt;
    &lt;/form&gt;

    &lt;table class=&quot;table&quot;&gt;
    &lt;thead&gt;
    &lt;tr&gt;
    &lt;th&gt;
    @@Html.DisplayNameFor(model = &gt; model.Movies[0].Title)
    &lt;/th&gt;
    &lt;th&gt;
    @@Html.DisplayNameFor(model = &gt; model.Movies[0].ReleaseDate)
    &lt;/th&gt;
    &lt;th&gt;
    @@.DisplayNameFor(model = &gt; model.Movies[0].Genre)
    &lt;/th&gt;
    &lt;th&gt;
    @@Html.DisplayNameFor(model = &gt; model.Movies[0].Price)
    &lt;/th&gt;
    &lt;th&gt;&lt;/th&gt;
    &lt;/tr&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;
    @@foreach (var item in Model.Movies)
    {
    &lt; tr & gt;
    &lt; td & gt;
    @@Html.DisplayFor(modelItem = &gt; item.Title)
    &lt;/ td & gt;
    &lt; td & gt;
    @@Html.DisplayFor(modelItem = &gt; item.ReleaseDate)
    &lt;/ td & gt;
    &lt; td & gt;
    @@Html.DisplayFor(modelItem = &gt; item.Genre)
    &lt;/ td & gt;
    &lt; td & gt;
    @@Html.DisplayFor(modelItem = &gt; item.Price)
    &lt;/ td & gt;
    &lt; td & gt;
    &lt; a asp-action = &quot; Edit & quot; asp - route - id = &quot;@@item.Id&quot; &gt; Edit & lt;/ a & gt; |
    &lt; a asp-action = &quot; Details & quot; asp - route - id = &quot;@@item.Id&quot; &gt; Details & lt;/ a & gt; |
    &lt; a asp-action = &quot; Delete & quot; asp - route - id = &quot;@@item.Id&quot; &gt; Delete & lt;/ a & gt;
    &lt;/ td & gt;
    &lt;/ tr & gt;
    }
    &lt;/tbody&gt;
    &lt;/table&gt;
</code></pre>
        <p>Examine the lambda expression used in the following HTML Helper:</p>
        <p><code>@@Html.DisplayNameFor(model = &gt; model.Movies[0].Title)</code></p>
        <p>In the preceding code, the <code>DisplayNameFor</code> HTML Helper inspects the <code>Title</code> property referenced in the lambda expression to determine the display name. Since the lambda expression is inspected rather than evaluated, you don't receive an access violation when <code>model</code>, <code>model.Movies</code>, or <code>model.Movies[0]</code> are <code>null</code> or empty. When the lambda expression is evaluated (for example, <code>@@Html.DisplayFor(modelItem = &gt; item.Title)</code>), the model's property values are evaluated.</p>
        <p>Test the app by searching by genre, by movie title, and by both:</p>
        <p><img src="/img/addsearch07-s2.png" alt="Browser window showing results of https://localhost:5001/Movies?MovieGenre=Comedy&amp;SearchString=2" title="Browser window showing results of https://localhost:5001/Movies?MovieGenre=Comedy&amp;SearchString=2"></p>

        <div class="div-flex">
            <a class="button" asp-area="" asp-controller="GetStarted" asp-action="ControllerMethods">Previous: Controller methods</a>
            <span class="span-flex"></span>
            <a class="button" asp-area="" asp-controller="GetStarted" asp-action="AddNewField">Next: Add a new field</a>
        </div>

    </div>

</div>
