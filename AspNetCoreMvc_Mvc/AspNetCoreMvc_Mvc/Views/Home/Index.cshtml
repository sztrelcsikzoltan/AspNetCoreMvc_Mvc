@{
    ViewData["Title"] = "Home Page";
}
<!--
<div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://docs.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div>
    -->

<div class="container">
    <h2>Welcome to the MVC information website</h2>
    <img id="img_MVC0" src="/img/MVC0.png" alt="Bactrian camel" title="Bactrian camels" />

    <h4>ASP.NET Core MVC is a rich framework for building web apps and APIs using the Model-View-Controller design pattern. </h4>
    <br />
    <p>The Model-View-Controller (MVC) architectural pattern separates an application into three main groups of components: Models, Views, and Controllers. This pattern helps to achieve separation of concerns. Using this pattern, user requests are routed to a Controller which is responsible for working with the Model to perform user actions and/or retrieve results of queries. The Controller chooses the View to display to the user, and provides it with any Model data it requires.</p>
    <p>This delineation of responsibilities helps you scale the application in terms of complexity because it's easier to code, debug, and test something (model, view, or controller) that has a single job. It's more difficult to update, test, and debug code that has dependencies spread across two or more of these three areas. For example, user interface logic tends to change more frequently than business logic. If presentation code and business logic are combined in a single object, an object containing business logic must be modified every time the user interface is changed. This often introduces errors and requires the retesting of business logic after every minimal user interface change.</p>
    <br />

</div>
